const { bot } = require("../bot");
const ApiError = require("../error/ApiError");
const { Alliance, User, Element } = require("../models/models");
const uuid = require('uuid')

class AllianceController {
    async create(req, res, next) {
        try {
            const { elementId } = req.body
            const userId = req.user.id

            const [alliance] = await Alliance.findOrCreate({
                where: { userId, elementId },
                defaults: {
                    id: uuid.v4().replace(/-/g, '')
                },
            })

            res.json(alliance)
        } catch (err) {
            next(ApiError.internal('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–ª—å—è–Ω—Å–∞.'));
        }
    }
    async joinAlliance(req, res, next) {
        try {
            const { id } = req.params
            const userId = req.user.id

            const alliance = await Alliance.findByPk(id);

            if (!alliance) {
                return next(ApiError.notFound("–ê–ª—å—è–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω."));
            }

            const joinerUser = await User.findByPk(userId)

            if (!joinerUser || !joinerUser.tg_id) {
                return next(ApiError.badRequest('–ß—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∞–ª—å—è–Ω—Å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞.'));
            }

            const planet = await Element.findByPk(alliance.elementId)

            if (!planet) {
                return next(ApiError.badRequest("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."));
            }

            const allianceOwner = await User.findByPk(alliance.userId)

            if (!allianceOwner || !allianceOwner.tg_id) {
                return next(ApiError.badRequest('–í–ª–∞–¥–µ–ª–µ—Ü –∞–ª—å—è–Ω—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç Telegram ID'));
            }

            if (alliance.members?.some(m => m.id === joinerUser.id)) {
                return next(ApiError.badRequest('–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–ª–µ–Ω–æ–º —ç—Ç–æ–≥–æ –∞–ª—å—è–Ω—Å–∞.'));
            }

            const callbackAccept = `acc_${joinerUser.id}_${alliance.id}`.slice(0, 64);
            const callbackReject = `rej_${joinerUser.id}_${alliance.id}`.slice(0, 64);


            let resultMessage = `üéâ <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∞–ª—å—è–Ω—Å!</b> üéâ\n\n` +
                `üë§ <b>–ò–≥—Ä–æ–∫:</b> ${joinerUser.name}\n` +
                `üåç <b>–ü–ª–∞–Ω–µ—Ç–∞:</b> ${planet.name}\n\n` +
                `–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å!`;

            // –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏
            const inlineKeyboard = {
                inline_keyboard: [
                    [
                        { text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: callbackAccept },
                        { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: callbackReject }
                    ]
                ]
            };


            await bot.sendMessage(allianceOwner.tg_id, resultMessage, {
                parse_mode: 'HTML',
                reply_markup: inlineKeyboard
            });

            res.json({ message: "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∞–ª—å—è–Ω—Å—É —É—Å–ø–µ—à–Ω–æ." });
        } catch (err) {
            console.log(err);
            next(ApiError.internal('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –∞–ª—å—è–Ω—Å—É.'));
        }
    }

    async getUsersAlliance(req, res, next) {
        try {
            const { allianceId } = req.params
            const alliance = await Alliance.findByPk(allianceId);

            if (!alliance) {
                return next(ApiError.notFound('–ê–ª—å—è–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.'));
            }

            res.json({ members: alliance.members });
        } catch (err) {
            next(ApiError.internal('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–ª—å—è–Ω—Å–∞.'));
        }
    }
}

module.exports = new AllianceController();